# create docker 
docker create hello-world

# give me any output from that 
docker start -a 809336c36d6e5c32e5b162b2015a895450fdcbfcd34f4c492631667c4439076a

# delete all docker container:
docker system prune

# print logs of docker:
docker logs 40190363e395ea07e9c3241189066e1a9b1381aef0a78819fd705198996ef310

# stop the container:
docker stop 5c19f79f4601
or 
docker kill 5c19f79f4601



# execute docker:
docker exec -it d37896dc0734 redis-cli

# execute in command shell:
linhtrinh$ docker exec -it d37896dc0734 sh


(base) Trinhs-MacBook-Pro:simpleweb linhtrinh$ docker build .
or 
docker build -t stephengrider/simpleweb .


# Stop a docker 
docker stop c6a3494367c3

# build docker compose:
docker-compose up --build

# call docker compose 
docker-compose up -d


# call docker compose down
docker-compose down

# restart policies:
"no"
always
on-failure
unless-stopped

# check list docker compose: must run this command in the folder has file docker-compose.yml :
docker-compose ps


npm run start: starts up a development server. For development use only
npm run test: runs tests associated with the project
npm run build: builds a production version of the application

# Build specifically the file used:
docker build -f Dockerfile.dev .


###
npm run start: Starts up a development server. For development use only
npm run test: runs test associated with the project
npm run build: builds a production version of the application.

# run test :
docker run 7276e63f28d860f67580a4ceafb5f03a6afe1a1a736613db9ba74117667b81bd npm run test


# What is ngnx???


####
docker build . 
docker run -p 8080:80 1343seer


###
Step 1:
# remove docker image:
docker system prune

Step 2:
# build docker 
docker build -t read_txt .

Step 3:
# run image
docker run read_txt




